package net.cbtltd.rest.yandex;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.ArrayList;

import net.cbtltd.server.RazorServer;
import net.cbtltd.server.ServiceException;
import net.cbtltd.server.api.AttributeMapper;
import net.cbtltd.server.api.PartnerMapper;
import net.cbtltd.server.api.ReservationMapper;
import net.cbtltd.server.script.Handleable;
import net.cbtltd.shared.Error;
import net.cbtltd.shared.NameId;
import net.cbtltd.shared.Partner;
import net.cbtltd.shared.Reservation;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;

/**
 * This class was generated by Apache CXF 2.4.0 2012-08-09T13:20:11.648+02:00
 * Generated source version: 2.4.0
 * 
 */
public final class _Test implements Handleable {

	private String altpartyid;

	public _Test(String altpartyid) {
		this.altpartyid = altpartyid;
	}

	public _Test() {
	}

	private static final Logger LOG = Logger.getLogger(_Test.class.getName());

	/**
	 * The main test method.
	 * 
	 * @param args the arguments
	 * @throws Exception the exception
	 */
	public static void main(String args[]) throws Exception {
		LOG.debug("NextPax Started");
		SqlSession sqlSession = RazorServer.openSession();
		try {
			String altpartyid = "179802"; // NextPax partner TUI Ferienhaus PROD
		
			Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
			if (partner == null) {
				throw new ServiceException(Error.party_id, altpartyid);
			}
			A_Handler handler = new A_Handler(partner);
			
			handler.readProducts();
		} catch (Throwable x) {
			sqlSession.rollback();
			x.printStackTrace();
		} finally {
			sqlSession.close();
		}
		LOG.error("NextPax Terminated not an error. ");
		System.exit(0);
	}

	private A_Handler getHandler() {
		SqlSession sqlSession = RazorServer.openSession();
		Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
		if (partner == null) {
			throw new ServiceException(Error.party_id, altpartyid);
		}
		A_Handler handler = new A_Handler(partner);
		return handler;
	}

	private A_Handler setHandler(String altpartyid) {
		SqlSession sqlSession = RazorServer.openSession();
		Partner partner = sqlSession.getMapper(PartnerMapper.class).exists(altpartyid);
		if (partner == null) {
			throw new ServiceException(Error.party_id, altpartyid);
		}
		A_Handler handler = new A_Handler(partner);
		return handler;
	}

	@Override
	public void readProducts() {
		getHandler().readProducts();
	}

	@Override
	public void readPrices() {
		getHandler().readPrices();
	}

	@Override
	public void readSchedules() {
		getHandler().readSchedule();
	}

	@Override
	public void readAlerts() {
		getHandler().readAlerts();
	}

	@Override
	public void readSpecials() {
		getHandler().readSpecials();
	}

	public static void testAttribute(SqlSession sqlSession) {
		ArrayList<String> attributes = new ArrayList<String>();
		attributes.add("PCT3");
		ArrayList<NameId> pctList = sqlSession.getMapper(AttributeMapper.class)
				.pctListValue(new net.cbtltd.shared.Attribute("PCT", attributes.get(0).substring("PCT".length())));
		for (NameId attribute : pctList) {
			System.out.println("Attribute name: " + attribute.getName());
		}
	}

	@Override
	public void readLocations() {
		throw new ServiceException(Error.service_absent, "Yandex readLocations()");
	}

	@Override
	public void readDescriptions() {
		getHandler().readDescriptions();
	}

	@Override
	public void readImages() {
		getHandler().readImages();
	}
}
